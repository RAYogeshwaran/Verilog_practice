// Code your design here
//  mod 7 counter using a RTL dataflow
//definning each flipflop
// It will count from 0 to N-1(6)
//the circuit already drawn in notes  //reset is on state
module day_4_counter_mod_7_async(clock,reset,out);
input clock, reset;
output [2:0] out;
wire [2:0] cout;
wire temp,temp2;
assign temp = out[0] ? cout[1] : out[1];
assign temp2 = (out[0]&out[1]) ? cout[2] : out[2];
//reg [2:0]out;
d_flipflop_1bit_async_negedge DUT1(.out(out[0]),.c_out(cout[0]),.d(cout[0]),.clk(clock),.reset(reset | (out[1]&out[2]&out[0])));  
d_flipflop_1bit_async_negedge DUT2(.out(out[1]),.c_out(cout[1]),.d(temp),.clk(clock),.reset(reset | (out[1]&out[2]&out[0]))); 
d_flipflop_1bit_async_negedge DUT3(.out(out[2]),.c_out(cout[2]),.d(temp2),.clk(clock),.reset(reset | (out[1]&out[2]&out[0])));  
//initial
//$monitor("%b",out[0]&out[1]&out[2]);
//assign reset = (out[0]&out[1]&out[2]) ? 1'b1 : 1'b0;
 

endmodule
module d_flipflop_1bit_async_negedge(out,c_out,d,clk,reset);
  input d,clk,reset;
  output out,c_out;
  reg out;
  always@(negedge(clk) or posedge(reset))
  begin
 
  if (reset == 1)
    out=1'b0;
 else
    out=d;
  end
assign c_out = ~out;
endmodule  
