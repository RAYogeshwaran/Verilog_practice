// Code your design here
//Arithmetic logic unit  
module day5_alu(a,b,out,command);
  input [3:0] a,b,command;
  output reg [3:0] out;
  
  always@(a,b,command)
    begin
      case(command)
        4'b0000 : out = ~a; // a one's complement
        4'b0001 : out = ~b; // b one's complement
        4'b0010 : out = a&b; // a and b
        4'b0011 : out = ~(a&b); // a nand b
        4'b0100 : out = a|b; // a or b
        4'b0101 : out = ~(a|b); // a noe b
        4'b0110 : out = a^b; // a xor b
        4'b0111 : out = ~(a^b); // a xnor b
        4'b1000 : out = a+b; // addition
        4'b1001 : out = (a<b) ? 4'd1 : out; //if A<B out = 1
        4'b1010 : out = a + 1; // increment a 
        4'b1011 : out = a - 1; // decrement a 
        4'b1100 : out = b + 1; // increment a 
        4'b1101 : out = b - 1; // decrement a 
        4'b1110 : out = (~a)+1; // a's 2's complement
        4'b1111 : out = (~b)+1;  // b's 2's complement
        default : out = 4'b0000;  //
      endcase
    end
      endmodule
